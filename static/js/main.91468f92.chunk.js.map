{"version":3,"sources":["constants.js","components/Sidebar.js","App.js","Client.js","serviceWorker.js","index.js"],"names":["SIDEBAR_MODES","0","1","2","SIDEBAR_ROUTES","DATE_FORMAT","Intl","DateTimeFormat","month","day","year","timeZone","Sidebar","allReports","sidebarMode","setSidebarMode","selectedDate","setSelectedDate","selectedState","setSelectedState","getUniqueStateCounts","df","rawStates","unique","transpose","toArray","counts","forEach","d","countValue","Object","keys","map","sort","a","b","localeCompare","getUniqueDateCounts","rawDates","k","parseInt","Date","tuple","getFullYear","format","isSidebarElemSelected","key","path","to","className","num","onClick","handleSidebarModeClick","style","mode","getSidebarTuples","CARD_DATE_FORMAT","LINK_STYLES","App","useState","setAllReports","selectedIncidents","setSelectedIncidents","useEffect","fetch","then","response","json","dataArray","data","DataFrame","row","rawDate","get","set","getMonth","getDate","getTime","getDefaultDate","getDefaultState","catch","err","console","error","uniqueDates","length","setIncidentsToCurrentFilters","filtered","toCollection","date","state","filter","getLinkStyle","link","url","URL","keyword","host","includes","incident","pb_id","city","title","name","links","target","rel","href","pathname","username","tokens","split","startsWith","substring","getLinkLabel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.91468f92.chunk.js","sourcesContent":["const SIDEBAR_MODES = {\n    0: 'Browse all',\n    1: 'Browse by date',\n    2: 'Browse by state',\n}\nconst SIDEBAR_ROUTES = {\n    0: '/all',\n    1: '/bydate',\n    2: '/bystate',\n}\nconst DATE_OPTIONS = { month: 'short', day: 'numeric', year: 'numeric', timeZone: 'UTC' }\nconst DATE_FORMAT = new Intl.DateTimeFormat('en-US', DATE_OPTIONS)\n\nexport { SIDEBAR_MODES, SIDEBAR_ROUTES, DATE_FORMAT, DATE_OPTIONS }\n","import React from 'react'\n\nimport { DATE_FORMAT, SIDEBAR_MODES, SIDEBAR_ROUTES } from '../constants'\nimport { Route, Switch, Redirect, Link } from 'react-router-dom'\n\nconst Sidebar = ({\n    allReports,\n    sidebarMode,\n    setSidebarMode,\n    selectedDate,\n    setSelectedDate,\n    selectedState,\n    setSelectedState\n}) => {\n    const getSidebarTuples = () => {\n        const mode = parseInt(sidebarMode)\n        if (mode === 0) {\n            return [];\n        } else if (mode === 1) {\n            return getUniqueDateCounts(allReports);\n        } else {\n            return getUniqueStateCounts(allReports);\n        }\n    }\n\n    const handleSidebarModeClick = (num) => {\n        setSidebarMode(parseInt(num))\n    }\n\n    const handleClickSidebarElem = (key) => {\n        if (sidebarMode === 1) {\n            setSelectedDate(key)\n        } else {\n            setSelectedState(key)\n        }\n    }\n\n    const getUniqueStateCounts = (df) => {\n        const rawStates = df.unique('state').transpose().toArray()[0];\n        const counts = {}\n        rawStates.forEach(d => {\n            counts[d] = df.countValue(d, 'state')\n        })\n        return Object.keys(counts)\n            .map(d => [d, counts[d], d])\n            .sort((a, b) => a[0].localeCompare(b[0]))\n    }\n\n    // Return list of [dateString, count, epochTime] tuples\n    const getUniqueDateCounts = (df) => {\n        // Unique gets returned as a column; toArray returns as array-of-arrays\n        const rawDates = df.unique('date').transpose().toArray()[0];\n        const counts = {}\n        rawDates.forEach(d => {\n            counts[d] = df.countValue(d, 'date')\n        })\n        const tuples = Object.keys(counts)\n            .map(k => parseInt(k))\n            .map(d => [new Date(d), counts[d], d])\n            .sort((a, b) => b[2] - a[2])\n            .map(tuple => {\n                let formatted;\n                if (tuple[0].getFullYear() < 2020) {\n                    formatted = 'Unknown Date'\n                } else {\n                    formatted = DATE_FORMAT.format(tuple[0])\n                }\n                return [formatted, tuple[1], tuple[2]]\n            });\n        return tuples;\n    }\n\n    const isSidebarElemSelected = (key) => {\n        if (sidebarMode === 1) {\n            return key === selectedDate\n        } else {\n            return key === selectedState\n        }\n    }\n\n    return (\n        <>\n            {allReports !== null &&\n                <>\n                    <Switch>\n                        <Route path=\"/\">\n                            <Redirect to=\"/bydate\" />\n                        </Route>\n                    </Switch>\n                    <div className=\"flex flex-col items-start mb-4\">\n                        {Object.keys(SIDEBAR_MODES).map(num => {\n                            return (\n                                <div key={num}\n                                    className={`cursor-pointer px-2 py-1 rounded-md ${parseInt(num) === parseInt(sidebarMode) ? 'bg-orange-200' : ''}`}\n                                    onClick={() => handleSidebarModeClick(num)}>\n                                    <Link to={SIDEBAR_ROUTES[num]}>\n                                        {SIDEBAR_MODES[num]}\n                                    </Link>\n                                </div>\n                            )\n                        })}\n                    </div>\n                    <div className=\"sidebar-list-line h-px bg-gray-300 my-4\"></div>\n                <div className=\"sidebar-list flex flex-col items-start overflow-y-scroll\" style={{'max-height': '50vh'}}>\n                        {getSidebarTuples().map(tuple =>\n                            <div onClick={() => handleClickSidebarElem(tuple[2])}\n                                className={`cursor-pointer px-2 py-1 rounded-md transition-all ease-linear duration-300 hover:text-black\n                          ${isSidebarElemSelected(tuple[2]) ? 'font-semibold bg-orange-200 text-black' : 'text-gray-600'}`}\n                                key={tuple[2]}>\n                                <span>{tuple[0]}</span>\n                                <span className={`ml-2 px-1 rounded-md ${isSidebarElemSelected(tuple[2]) ? 'bg-orange-400' : 'bg-gray-400'}`}>{tuple[1]}</span>\n                            </div>)}\n                    </div>\n                    <div className=\"sidebar-list-line h-px bg-gray-300 my-4\"></div>\n                </>\n            }\n        </>\n    )\n}\n\nexport default Sidebar;\n","import React, { useState, useEffect } from 'react';\nimport DataFrame from \"dataframe-js\";\nimport './App.css';\nimport { getOfficialAPIDataFrame } from './Client'\nimport Sidebar from './components/Sidebar'\n\nconst DATE_OPTIONS = { month: 'short', day: 'numeric', year: 'numeric', timeZone: 'UTC'}\nconst DATE_FORMAT = new Intl.DateTimeFormat('en-US', DATE_OPTIONS)\nconst CARD_DATE_OPTIONS = {\n  year: 'numeric', month: 'numeric', day: 'numeric', timeZone: 'UTC'}\nconst CARD_DATE_FORMAT = new Intl.DateTimeFormat('en-US', CARD_DATE_OPTIONS)\n\nconst LINK_STYLES = {\n  'twitter': 'bg-blue-500 text-gray-100',\n  'instagram': 'bg-pink-500 text-gray-100',\n  'reddit': 'bg-orange-500 text-gray-100',\n  'redd': 'bg-orange-500 text-gray-100',\n  'tiktok': 'bg-red-500 text-gray-100'\n}\n\nfunction App() {\n  const [errors, setErrors] = useState('')\n  const [allReports, setAllReports] = useState(null)\n  /* 0: Don't use sidebar\n     1: Sidebar to enumerate dates\n     2: Side bar to enumerate states\n  */\n  const [sidebarMode, setSidebarMode] = useState(1)\n  const [selectedDate, setSelectedDate] = useState(null)\n  const [selectedState, setSelectedState] = useState(null)\n  const [selectedIncidents, setSelectedIncidents] = useState([])\n\n  useEffect(() => {\n    getOfficialAPIDataFrame()\n      .then(df => {\n        setAllReports(df)\n        setSelectedDate(getDefaultDate(df));\n        setSelectedState(getDefaultState(df));\n      })\n      .catch(err => console.error(err))\n  }, []);\n\n  const getDefaultDate = df => {\n    const uniqueDates = df.unique('date').transpose().toArray()[0];\n    return uniqueDates.sort((a, b) => a - b)[uniqueDates.length - 1]\n  }\n\n  const getDefaultState = df => {\n    const uniqueStates = df.unique('state').transpose().toArray()[0];\n    return uniqueStates.sort()[0]\n  }\n\n  useEffect(() => {\n    setIncidentsToCurrentFilters();\n  }, [sidebarMode,selectedState, selectedDate])\n\n\n  const setIncidentsToCurrentFilters = () => {\n    if (allReports === null) {\n      return;\n    }\n    let filtered = [];\n    if (sidebarMode === 0) {\n      filtered = allReports.toCollection()\n      filtered.sort((a, b) => {\n        if (b.date === a.date) {\n          return a.state.localeCompare(b.state)\n        } else {\n          return (new Date(b.date) - new Date(a.date))\n        }\n      });\n    } else if (sidebarMode === 1) {\n      filtered = allReports.filter(row => row.get('date') === selectedDate).toCollection()\n      filtered.sort((a, b) => new Date(b.date) - new Date(a.date))\n    } else if (sidebarMode === 2) {\n      filtered = allReports.filter(row => row.get('state') === selectedState).toCollection()\n      filtered.sort((a, b) => new Date(b.date) - new Date(a.date))\n    }\n    setSelectedIncidents(filtered);\n  }\n\n  const handleSidebarModeClick = (num) => {\n    setSidebarMode(parseInt(num))\n  }\n\n  const handleClickSidebarElem = (key) => {\n    if (sidebarMode === 1) {\n      setSelectedDate(key)\n    } else {\n      setSelectedState(key)\n    }\n  }\n\n  const getUniqueStateCounts = (df) => {\n    const rawStates = df.unique('state').transpose().toArray()[0];\n    const counts = {}\n    rawStates.forEach(d => {\n      counts[d] = df.countValue(d, 'state')\n    })\n    return Object.keys(counts)\n      .map(d => [d, counts[d], d])\n      .sort((a, b) => a[0].localeCompare(b[0]))\n  }\n\n  // Return list of [dateString, count, epochTime] tuples\n  const getUniqueDateCounts = (df) => {\n    // Unique gets returned as a column; toArray returns as array-of-arrays\n    const rawDates = df.unique('date').transpose().toArray()[0];\n    const counts = {}\n    rawDates.forEach(d => {\n      counts[d] = df.countValue(d, 'date')\n    })\n    const tuples = Object.keys(counts)\n      .map(k => parseInt(k))\n      .map(d => [new Date(d), counts[d], d])\n      .sort((a, b) => b[2] - a[2])\n      .map(tuple => {\n        let formatted;\n        if (tuple[0].getFullYear() < 2020) {\n          formatted = 'Unknown Date'\n        } else {\n          formatted = DATE_FORMAT.format(tuple[0])\n        }\n        return [formatted, tuple[1], tuple[2]]\n      });\n    return tuples;\n  }\n\n  const isSidebarElemSelected = (key) => {\n    if (sidebarMode === 1) {\n      return key === selectedDate\n    } else {\n      return key === selectedState\n    }\n  }\n\n  const getLinkStyle = (link) => {\n    let url;\n    try {\n      url = new URL(link)\n    } catch (err) {\n      return 'opacity-50 border border-gray-400'\n    }\n    for (const keyword of Object.keys(LINK_STYLES)) {\n      if (url.host.includes(keyword)) {\n        return LINK_STYLES[keyword]\n      }\n    }\n    return 'bg-gray-400';\n  }\n\n  const getLinkLabel = (link) => {\n    let url;\n    try {\n      url = new URL(link)\n    } catch (err) {\n      return '(bad link)'\n    }\n    if (url.host.includes('twitter.com') && url.pathname) {\n      let tokens = url.pathname.split('/')\n      let username;\n      if (tokens.length >= 2) {\n        username = tokens[1];\n      }\n      return '@' + username\n    }\n    if (url.host.startsWith(\"www.\")) {\n      return url.host.substring(4)\n    }\n    return url.host;\n  }\n\n  return (\n    <div className=\"container mx-auto\">\n      <div className=\"my-6 text-3xl\">Police Brutality During the 2020 George Floyd Protests</div>\n      <div className=\"flex my-4\">\n        <div className=\"w-1/4 px-4\">\n          <Sidebar {... {allReports, sidebarMode, setSidebarMode, selectedDate, setSelectedDate, selectedState, setSelectedState }} />\n        </div>\n        <div className=\"w-3/4 px-4 overflow-y-scroll report-column\" style={{'max-height': '90vh'}}>\n          {selectedIncidents.map(incident => {\n            if (new Date(incident.date).getFullYear() < 2020) {\n              incident.date = null\n            }\n            return (<div key={incident.pb_id} className=\"max-w-full rounded overflow-hidden border border-gray-400 mb-4\">\n              <div className=\"px-6 py-4\">\n                <div className=\"mb-2\">\n                  <span className=\"font-bold text-gray-800 mr-2\">{!incident.date ? 'Unknown Date' : CARD_DATE_FORMAT.format(new Date(incident.date))}</span>\n                  <span className=\"uppercase font-semibold text-sm text-gray-700 mr-1\">{incident.city},</span>\n                  <span className=\"uppercase font-semibold text-sm text-gray-600\">{incident.state}</span>\n                </div>\n                <div className=\"mb-2\">\n                  <p>{incident.title ? incident.title : incident.name}</p>\n                </div>\n                <div>\n                  <span className=\"uppercase font-bold text-gray-600 text-xs mr-2\">Sources: </span>\n                  {incident.links.map(link => {\n                    return (<span className={`inline-block rounded-full px-3 py-1 mt-2 font-semibold text-sm mr-2 ${getLinkStyle(link)}`}>\n                      <a target=\"_blank\" rel=\"noopener noreferrer\" href={link}>\n                      {getLinkLabel(link)}</a></span>)\n                  })}\n                </div>\n              </div>\n            </div>)\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import DataFrame from \"dataframe-js\";\n\nconst PHP_API_URL = 'https://api.846policebrutality.com/api/incidents'\nconst OFFICIAL_URL = 'https://raw.githubusercontent.com/2020PB/police-brutality/data_build/all-locations.json'\n\nconst getPHPAPIDataFrame = () => {\n    return fetch(PHP_API_URL)\n    .then(response => response.json())\n    .then(json => {\n        if (!('data' in json)) {\n            throw `Missing key 'data' in Github response`\n        }\n        const dataArray = json.data;\n        let df = new DataFrame(dataArray, \n            ['id', 'pb_id', 'state', 'city', 'date', 'title', 'links'])\n        // Hour:min:seconds messes with stuff; API does not appear to have H:M:S info\n        df.map(row => {\n            const rawDate = new Date(row.get('date'))\n            if (!rawDate) {\n                row.set('date', new Date(0));\n            }\n            row = row.set('date', new Date(rawDate.getFullYear(), rawDate.getMonth(), rawDate.getDate()))\n        });\n        return df;\n    });\n}\n\nconst getOfficialAPIDataFrame = () => {\n    return fetch(OFFICIAL_URL)\n        .then(response => response.json())\n        .then(json => {\n            if (!('data' in json)) {\n                throw `Missing key 'data' in Github response`\n            }\n            const dataArray = json.data;\n            let df = new DataFrame(dataArray,\n                ['id', 'state', 'city', 'date', 'name', 'links'])\n            // Hour:min:seconds messes with stuff; API does not appear to have accurate H:M:S info\n            df = df.map(row => {\n                const rawDate = new Date(row.get('date'))\n                let newRow;\n                if (!row.get('date')) {\n                    newRow = row.set('date', 946684800000)\n                } else {\n                    newRow = row.set('date', new Date(rawDate.getFullYear(), rawDate.getMonth(), rawDate.getDate() + 1).getTime() + 25200000);\n                }\n                return newRow;\n            });\n            return df;\n        });\n}\n\nexport { getPHPAPIDataFrame, getOfficialAPIDataFrame }\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/tailwind.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter, BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}