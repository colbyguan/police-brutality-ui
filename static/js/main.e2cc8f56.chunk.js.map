{"version":3,"sources":["App.js","Client.js","serviceWorker.js","index.js"],"names":["DATE_FORMAT","Intl","DateTimeFormat","month","day","year","timeZone","CARD_DATE_FORMAT","SIDEBAR_MODES","0","1","2","LINK_STYLES","App","useState","allReports","setAllReports","sidebarMode","setSidebarMode","selectedDate","setSelectedDate","selectedState","setSelectedState","selectedIncidents","setSelectedIncidents","useEffect","fetch","then","response","json","dataArray","data","df","DataFrame","map","row","rawDate","Date","get","set","getFullYear","getMonth","getDate","getUniqueDateCounts","getUniqueStateCounts","catch","err","console","error","setIncidentsToCurrentFilters","filtered","toCollection","sort","a","b","date","state","localeCompare","filter","rawStates","unique","transpose","toArray","counts","forEach","d","countValue","Object","keys","rawDates","tuple","format","isSidebarElemSelected","key","getLinkStyle","link","url","URL","keyword","host","includes","className","num","parseInt","onClick","handleSidebarModeClick","mode","getSidebarTuples","incident","pb_id","city","title","links","target","rel","href","getLinkLabel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e2cc8f56.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DataFrame from \"dataframe-js\";\nimport './App.css';\nimport { getReportsDataFrame } from './Client'\n\nconst DATE_OPTIONS = { month: 'short', day: 'numeric', year: 'numeric', timeZone: 'UTC'}\nconst DATE_FORMAT = new Intl.DateTimeFormat('en-US', DATE_OPTIONS)\nconst CARD_DATE_OPTIONS = {\n  year: 'numeric', month: 'numeric', day: 'numeric', timeZone: 'UTC'}\nconst CARD_DATE_FORMAT = new Intl.DateTimeFormat('en-US', CARD_DATE_OPTIONS)\nconst SIDEBAR_MODES = {\n  0: 'Browse all',\n  1: 'Browse by date',\n  2: 'Browse by state',\n}\nconst LINK_STYLES = {\n  'twitter': 'bg-blue-500',\n  'reddit': 'bg-orange-400',\n  'redd': 'bg-orange-400',\n}\n\nfunction App() {\n  const [errors, setErrors] = useState('')\n  const [allReports, setAllReports] = useState(null)\n  /* 0: Don't use sidebar\n     1: Sidebar to enumerate dates\n     2: Side bar to enumerate states\n  */\n  const [sidebarMode, setSidebarMode] = useState(1)\n  const [selectedDate, setSelectedDate] = useState(null)\n  const [selectedState, setSelectedState] = useState(null)\n  const [selectedIncidents, setSelectedIncidents] = useState([])\n\n  useEffect(() => {\n    getReportsDataFrame()\n      .then(df => {\n        setAllReports(df)\n        setSelectedDate(getUniqueDateCounts(df)[0][2])\n        setSelectedState(getUniqueStateCounts(df)[0][2])\n      })\n      .catch(err => console.error(err))\n  }, []);\n\n  useEffect(() => {\n    setIncidentsToCurrentFilters();\n  }, [sidebarMode,selectedState, selectedDate])\n\n  const setIncidentsToCurrentFilters = () => {\n    if (allReports === null) {\n      return;\n    }\n    let filtered = [];\n    if (sidebarMode === 0) {\n      filtered = allReports.toCollection()\n      filtered.sort((a, b) => {\n        if (b.date === a.date) {\n          return a.state.localeCompare(b.state)\n        } else {\n          return (new Date(b.date) - new Date(a.date))\n        }\n      });\n    } else if (sidebarMode === 1) {\n      filtered = allReports.filter(row => row.get('date') === selectedDate).toCollection()\n      filtered.sort((a, b) => new Date(b.date) - new Date(a.date))\n    } else if (sidebarMode === 2) {\n      filtered = allReports.filter(row => row.get('state') === selectedState).toCollection()\n      filtered.sort((a, b) => new Date(b.date) - new Date(a.date))\n    }\n    setSelectedIncidents(filtered);\n  }\n\n  const handleSidebarModeClick = (num) => {\n    setSidebarMode(parseInt(num))\n  }\n\n  const handleClickSidebarElem = (key) => {\n    if (sidebarMode === 1) {\n      setSelectedDate(key)\n    } else {\n      setSelectedState(key)\n    }\n  }\n\n  const getSidebarTuples = () => {\n    const mode = parseInt(sidebarMode)\n    if (mode === 0) {\n      return [];\n    } else if (mode === 1) {\n      return getUniqueDateCounts(allReports);\n    } else {\n      return getUniqueStateCounts(allReports);\n    }\n  }\n\n  const getUniqueStateCounts = (df) => {\n    const rawStates = df.unique('state').transpose().toArray()[0];\n    const counts = {}\n    rawStates.forEach(d => {\n      counts[d] = df.countValue(d, 'state')\n    })\n    return Object.keys(counts)\n      .map(d => [d, counts[d], d])\n      .sort((a, b) => a[0].localeCompare(b[0]))\n  }\n\n  const getUniqueDateCounts = (df) => {\n    // Unique gets returned as a column; toArray returns as array-of-arrays\n    const rawDates = df.unique('date').transpose().toArray()[0];\n    const counts = {}\n    rawDates.forEach(d => {\n      counts[d] = df.countValue(d, 'date')\n    })\n    return Object.keys(counts)\n      .map(d => [new Date(d), counts[d], d])\n      .sort((a, b) => b[0] - a[0])\n      .map(tuple => {\n        let formatted;\n        if (tuple[0].getFullYear() < 2020) {\n          formatted = 'Unknown Date'\n        } else {\n          formatted = DATE_FORMAT.format(tuple[0])\n        }\n        return [formatted, tuple[1], tuple[2]]\n      });\n  }\n\n  const isSidebarElemSelected = (key) => {\n    if (sidebarMode === 1) {\n      return key === selectedDate\n    } else {\n      return key === selectedState\n    }\n  }\n\n  const getLinkStyle = (link) => {\n    const url = new URL(link)\n    for (const keyword of Object.keys(LINK_STYLES)) {\n      if (url.host.includes(keyword)) {\n        return LINK_STYLES[keyword]\n      }\n    }\n    return 'bg-gray-400';\n  }\n\n  const getLinkLabel = (link) => {\n    const url = new URL(link)\n    return url.host;\n  }\n\n  return (\n    <div className=\"container mx-auto\">\n      <div className=\"my-6 text-3xl\">Police Brutality During the 2020 George Floyd Protests</div>\n      <div className=\"flex my-4\">\n        <div className=\"w-1/4\">\n          {allReports !== null &&\n            <>\n              <div className=\"flex flex-col items-start mb-4\">\n                {Object.keys(SIDEBAR_MODES).map(num => {\n                  return <div key={num}\n                              className={`px-2 py-1 rounded-md ${parseInt(num) === parseInt(sidebarMode) ? 'bg-orange-200': ''}`}\n                              onClick={() => handleSidebarModeClick(num)}>\n                              {SIDEBAR_MODES[num]}</div>\n                })}\n              </div>\n              <div className=\"flex flex-col items-start\">\n                {getSidebarTuples().map(tuple =>\n                  <div onClick={() => handleClickSidebarElem(tuple[2])}\n                       className={`cursor-pointer px-2 py-1 rounded-md transition-all ease-linear duration-300 hover:text-black\n                          ${isSidebarElemSelected(tuple[2]) ? 'font-semibold bg-orange-200 text-black' : 'text-gray-600'}`}\n                       key={tuple[2]}>\n                    <span>{tuple[0]}</span>\n                    <span className={`ml-2 px-1 rounded-md ${isSidebarElemSelected(tuple[2]) ? 'bg-orange-400' : 'bg-gray-400'}`}>{tuple[1]}</span>\n                  </div>)}\n              </div>\n            </>\n          }\n        </div>\n        <div className=\"w-3/4\">\n          {selectedIncidents.map(incident => {\n            return (<div key={incident.pb_id} className=\"max-w-full rounded overflow-hidden border border-gray-400 mb-4\">\n              <div className=\"px-6 py-4\">\n                <div className=\"mb-2\">\n                  <span className=\"font-bold text-gray-800 mr-2\">{CARD_DATE_FORMAT.format(new Date(incident.date))}</span>\n                  <span className=\"uppercase font-semibold text-sm text-gray-700 mr-1\">{incident.city},</span>\n                  <span className=\"uppercase font-semibold text-sm text-gray-600\">{incident.state}</span>\n                </div>\n                <div className=\"mb-2\">\n                  <p>{incident.title}</p>\n                </div>\n                <div>\n                  <span className=\"uppercase font-bold text-gray-600 text-xs mr-2\">Sources: </span>\n                  {incident.links.map(link => {\n                    return (<span className={`inline-block rounded-full px-3 py-1 font-semibold text-sm mr-2 ${getLinkStyle(link)}`}>\n                      <a target=\"_blank\" rel=\"noopener noreferrer\" href={link}>\n                      {getLinkLabel(link)}</a></span>)\n                  })}\n                </div>\n              </div>\n            </div>)\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import DataFrame from \"dataframe-js\";\n\nconst REQUEST_URL = 'https://api.846policebrutality.com/api/incidents'\n\nconst getReportsDataFrame = () => {\n    return fetch(REQUEST_URL)\n    .then(response => response.json())\n    .then(json => {\n        if (!('data' in json)) {\n            throw `Missing key 'data' in Github response`\n        }\n        const dataArray = json.data;\n        let df = new DataFrame(dataArray, \n            ['id', 'pb_id', 'state', 'city', 'date', 'title', 'links'])\n        // Hour:min:seconds messes with stuff; API does not appear to have H:M:S info\n        df.map(row => {\n            const rawDate = new Date(row.get('date'))\n            row.set('date', new Date(rawDate.getFullYear(), rawDate.getMonth(), rawDate.getDate()))\n        });\n        return df;\n    });\n}\n\nexport { getReportsDataFrame }\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/tailwind.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}